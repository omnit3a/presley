(def-func (null? obj)
  (if (eqv? obj '()) #t #f)
)
(def-func (even? num)
  (= (mod num 2) 0)  
)
(def-func (odd? num)
  (= (mod num 2) 1)
)

(def-func (curry func arg1)
  (lambda (arg) (apply func (cons arg1 (list arg))))
)
(def-func (flip func)
  (lambda (arg1 arg2) (func arg2 arg1))
)
(def-func (reverse lst)
  (fold (flip cons) '() lst)
)

(def-func (foldr func end lst)
  (if (null? lst)
    end
    (func (car lst) (foldr func end (cdr lst)))
  )
)
(def-func (foldl func accum lst)
  (if (null? lst)
    accum
    (foldl func (func accum (car lst)) (cdr lst))
  )
)
(let fold foldl)
(let reduce foldr)

(def-func (list . objs) objs)
(def-func (curry func arg1) (lambda (arg) (apply func (cons arg1 (list arg)))))

(def-func (length lst)        (fold (lambda (x y) (+ x 1)) 0 lst))

(def-func (map func lst)
  (foldr (lambda (x y) (cons (func x) y)) '() lst)
)
(def-func (filter pred lst)
  (foldr (lambda (x y) (if (pred x) (cons x y) y)) '() lst)
)

(def-func (seq start end lst)
  (let out (reverse (cons start (reverse lst))))
  (if (< (+ start 1) end)
      (seq (+ start 1) end out)
      out
  )
)